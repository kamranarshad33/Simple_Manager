public static void historySearch() {
        int option = 0;
        String date = "";
        int category = 0;
 
        do{
            try {
               option = Integer.parseInt(JOptionPane.showInputDialog(null, "Search transactions by:\n 1) Date\n 2) Category",
                  "Search Transaction History", JOptionPane.QUESTION_MESSAGE));
               if (option < 1 || option > 2) {
                  throw new NumberFormatException();
               }
               else {
                  switch(option) {
                     case 1: // Search by Date
                        do {
                           date = JOptionPane.showInputDialog(null, "Enter a date in the format of MM/DD/YY: ");
                        } while (!validDate(date)); 
                        historyReport(date);
                        break;
                     case 2: // Search by transaction category
                        do  {
                           category = Integer.parseInt(JOptionPane.showInputDialog(null, "Search by:\n 1) Deposits\n 2) Withdrawals"));
                           if (category < 1 || category > 2) {
                              throw new NumberFormatException();
                           }
                        } while (category < 1 || category > 2);
                        historyReport(category);
                        break;
                  }
               }
            }
            catch (NumberFormatException e) {
               JOptionPane.showMessageDialog(null, "Error: Search Choice must be number 1 or 2.  Please try again.");
            }
        }while(option < 1 || option > 2);    
    }
    
    public static boolean validDate(String date) {
         if(date.length() != 8){
            JOptionPane.showMessageDialog(null, "Error: Date must be in format MM/DD/YY. Please try again.");
            return false;
         }
         else{
            for(int i = 0; i < date.length(); i++){
                if(i == 0){
                    if(date.charAt(i) != '0' || date.charAt(i) != '1'){
                        JOptionPane.showMessageDialog(null, "Error: The first number in the date must be 0 or 1. Please try again.");
                        return false;
                    }
                }
                else if(i != 2 || i != 5){
                    if(!Character.isDigit(date.charAt(i))){
                        JOptionPane.showMessageDialog(null, "Error: The date can only contain numbers and /. Please try again.");
                        return false;
                    }
                }
                else{
                    if(date.charAt(i) != '/'){
                        JOptionPane.showMessageDialog(null, "Error: The third and fifth character in the date must be a /. Please try again.");
                        return false;
                    }
                }
            }
            return true;
        }
    }
    
    public static void historyReport(String date) {
        String report = searchTransactions(date);
        writeReport(report);
    }
    
    public static void historyReport(int category) {
        String report = "";
        if(category == 1){
            //unless we are going to use W for withdrawal
            String type = "Withdrawal";
            report = searchTransactions(type);
        }
        else if(category == 2){
            //unless we are going to use D for deposit
            String type = "Deposit"; 
            report = searchTransactions(type);
        }
        writeReport(report);
    }
    
    public static String searchTransactions(String key, AppUser UserObj){
        LinkedList<Transaction> transactions = getTransactions();
        String report = "";
        if(!Character.isDigit(key.charAt(0))){
            for(Transaction curr : transactions){
                if(curr.getTransType().equals(key)){
                    report += curr.toString();
                }
            }
        }
        else{
            for(Transaction curr : transactions){
                if(curr.getDate().equals(key)){
                    report += curr.toString();
                }
            }
        }
        return report;
    }
    
    //write to file??
    public static void writeReport(String report){
        
    }
